// <auto-generated />
using System;
using EVerywhere.ChargerPoint.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EVerywhere.ChargerPoint.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ChargerPointDbContext))]
    partial class ChargerPointDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EVerywhere.ChargerPoint.Domain.Entities.Charger", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("charger_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<long>("AggregatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("aggregator_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsConnected")
                        .HasColumnType("boolean")
                        .HasColumnName("is_connected");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<double?>("Lat")
                        .HasColumnType("double precision")
                        .HasColumnName("lat");

                    b.Property<double?>("Lon")
                        .HasColumnType("double precision")
                        .HasColumnName("lon");

                    b.Property<long>("OperatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("operator_id");

                    b.Property<string>("OperatorSystemChargerId")
                        .HasColumnType("text")
                        .HasColumnName("operator_system_charger_id");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text")
                        .HasColumnName("serial_number");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("WebId")
                        .HasColumnType("text")
                        .HasColumnName("web_id");

                    b.HasKey("Id")
                        .HasName("pk_chargers");

                    b.HasIndex("WebId")
                        .HasDatabaseName("ix_chargers_web_id");

                    b.ToTable("chargers", (string)null);
                });

            modelBuilder.Entity("EVerywhere.ChargerPoint.Domain.Entities.Connector", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("connector_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChargerId")
                        .HasColumnType("bigint")
                        .HasColumnName("charger_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<double>("Power")
                        .HasColumnType("double precision")
                        .HasColumnName("power");

                    b.Property<string>("SerialNum")
                        .HasColumnType("text")
                        .HasColumnName("serial_num");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<bool>("Tariffed")
                        .HasColumnType("boolean")
                        .HasColumnName("tariffed");

                    b.HasKey("Id")
                        .HasName("pk_connectors");

                    b.HasIndex("ChargerId")
                        .HasDatabaseName("ix_connectors_charger_id");

                    b.ToTable("connectors", (string)null);
                });

            modelBuilder.Entity("EVerywhere.ChargerPoint.Domain.Entities.SpecificOperatorChargerConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ChargerStatusAvailableIconUrl")
                        .HasColumnType("text")
                        .HasColumnName("charger_status_available_icon_url");

                    b.Property<string>("ChargerStatusOccupiedIconUrl")
                        .HasColumnType("text")
                        .HasColumnName("charger_status_occupied_icon_url");

                    b.Property<string>("ChargerStatusUnavailableIconUrl")
                        .HasColumnType("text")
                        .HasColumnName("charger_status_unavailable_icon_url");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<long>("OperatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("operator_id");

                    b.HasKey("Id")
                        .HasName("pk_specific_operator_charger_configs");

                    b.ToTable("specific_operator_charger_configs", (string)null);
                });

            modelBuilder.Entity("EVerywhere.ChargerPoint.Domain.Entities.Connector", b =>
                {
                    b.HasOne("EVerywhere.ChargerPoint.Domain.Entities.Charger", "Charger")
                        .WithMany("Connectors")
                        .HasForeignKey("ChargerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_connectors_chargers_charger_id");

                    b.Navigation("Charger");
                });

            modelBuilder.Entity("EVerywhere.ChargerPoint.Domain.Entities.Charger", b =>
                {
                    b.Navigation("Connectors");
                });
#pragma warning restore 612, 618
        }
    }
}
