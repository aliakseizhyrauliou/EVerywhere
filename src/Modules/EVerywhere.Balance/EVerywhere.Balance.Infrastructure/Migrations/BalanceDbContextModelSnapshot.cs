// <auto-generated />
using System;
using EVerywhere.Balance.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EVerywhere.Balance.Infrastructure.Migrations
{
    [DbContext(typeof(BalanceDbContext))]
    partial class BalanceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EVerywhere.Balance.Domain.Entities.Debtor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("debtor_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalData")
                        .HasColumnType("jsonb")
                        .HasColumnName("additional_data");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<int>("CaptureAttemptCount")
                        .HasColumnType("integer")
                        .HasColumnName("capture_attempt_count");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("DebtorCaptureLastErrorMessage")
                        .HasColumnType("text")
                        .HasColumnName("debtor_capture_last_error_message");

                    b.Property<bool>("IsCaptured")
                        .HasColumnType("boolean")
                        .HasColumnName("is_captured");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastCaptureAttempt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_capture_attempt");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<bool>("NeedToCapture")
                        .HasColumnType("boolean")
                        .HasColumnName("need_to_capture");

                    b.Property<long?>("NewPaymentId")
                        .HasColumnType("bigint")
                        .HasColumnName("new_payment_id");

                    b.Property<string>("OperatorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("operator_id");

                    b.Property<string>("PaidResourceId")
                        .HasColumnType("text")
                        .HasColumnName("paid_resource_id");

                    b.Property<long?>("PaidResourceTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("paid_resource_type_id");

                    b.Property<long>("PaymentMethodId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_method_id");

                    b.Property<long>("PaymentSystemConfigurationId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_system_configuration_id");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_debtors");

                    b.HasIndex("NewPaymentId")
                        .IsUnique()
                        .HasDatabaseName("ix_debtors_new_payment_id");

                    b.HasIndex("PaidResourceTypeId")
                        .HasDatabaseName("ix_debtors_paid_resource_type_id");

                    b.HasIndex("PaymentMethodId")
                        .HasDatabaseName("ix_debtors_payment_method_id");

                    b.HasIndex("PaymentSystemConfigurationId")
                        .HasDatabaseName("ix_debtors_payment_system_configuration_id");

                    b.ToTable("debtors", (string)null);
                });

            modelBuilder.Entity("EVerywhere.Balance.Domain.Entities.Hold", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("hold_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalData")
                        .HasColumnType("jsonb")
                        .HasColumnName("additional_data");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<long?>("HoldCaptureCreatedPaymentId")
                        .HasColumnType("bigint")
                        .HasColumnName("hold_capture_created_payment_id");

                    b.Property<bool>("IsCaptured")
                        .HasColumnType("boolean")
                        .HasColumnName("is_captured");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsVoided")
                        .HasColumnType("boolean")
                        .HasColumnName("is_voided");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("OperatorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("operator_id");

                    b.Property<string>("PaidResourceId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("paid_resource_id");

                    b.Property<long?>("PaidResourceTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("paid_resource_type_id");

                    b.Property<long?>("PaymentMethodId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_method_id");

                    b.Property<long>("PaymentSystemConfigurationId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_system_configuration_id");

                    b.Property<string>("PaymentSystemTransactionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_system_transaction_id");

                    b.Property<long?>("PaymentSystemWidgetGenerationId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_system_widget_generation_id");

                    b.Property<string>("ReceiptUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("receipt_url");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_holds");

                    b.HasIndex("PaidResourceTypeId")
                        .HasDatabaseName("ix_holds_paid_resource_type_id");

                    b.HasIndex("PaymentMethodId")
                        .HasDatabaseName("ix_holds_payment_method_id");

                    b.HasIndex("PaymentSystemConfigurationId")
                        .HasDatabaseName("ix_holds_payment_system_configuration_id");

                    b.ToTable("holds", (string)null);
                });

            modelBuilder.Entity("EVerywhere.Balance.Domain.Entities.PaidResourceType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("paid_resource_type_configuration_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type_name");

                    b.HasKey("Id")
                        .HasName("pk_paid_resource_type_configurations");

                    b.ToTable("paid_resource_type_configurations", (string)null);
                });

            modelBuilder.Entity("EVerywhere.Balance.Domain.Entities.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("payment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalData")
                        .HasColumnType("jsonb")
                        .HasColumnName("additional_data");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<long?>("CaptureDebtorId")
                        .HasColumnType("bigint")
                        .HasColumnName("capture_debtor_id");

                    b.Property<long?>("CapturedHoldId")
                        .HasColumnType("bigint")
                        .HasColumnName("captured_hold_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsBonus")
                        .HasColumnType("boolean")
                        .HasColumnName("is_bonus");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsRefund")
                        .HasColumnType("boolean")
                        .HasColumnName("is_refund");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("boolean")
                        .HasColumnName("is_success");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("OperatorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("operator_id");

                    b.Property<string>("PaidResourceId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("paid_resource_id");

                    b.Property<long?>("PaidResourceTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("paid_resource_type_id");

                    b.Property<long?>("PaymentMethodId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_method_id");

                    b.Property<long>("PaymentSystemConfigurationId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_system_configuration_id");

                    b.Property<string>("PaymentSystemTransactionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_system_transaction_id");

                    b.Property<long?>("PaymentSystemWidgetId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_system_widget_id");

                    b.Property<string>("ReceiptUrl")
                        .HasColumnType("text")
                        .HasColumnName("receipt_url");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_payments");

                    b.HasIndex("CapturedHoldId")
                        .IsUnique()
                        .HasDatabaseName("ix_payments_captured_hold_id");

                    b.HasIndex("PaidResourceTypeId")
                        .HasDatabaseName("ix_payments_paid_resource_type_id");

                    b.HasIndex("PaymentMethodId")
                        .HasDatabaseName("ix_payments_payment_method_id");

                    b.HasIndex("PaymentSystemConfigurationId")
                        .HasDatabaseName("ix_payments_payment_system_configuration_id");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("EVerywhere.Balance.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("payment_method_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CardNumberData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("card_number_data");

                    b.Property<int>("CardType")
                        .HasColumnType("integer")
                        .HasColumnName("card_type");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("ExpiryMonth")
                        .HasColumnType("integer")
                        .HasColumnName("expiry_month");

                    b.Property<int>("ExpiryYear")
                        .HasColumnType("integer")
                        .HasColumnName("expiry_year");

                    b.Property<string>("First1")
                        .HasColumnType("text")
                        .HasColumnName("first1");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("boolean")
                        .HasColumnName("is_selected");

                    b.Property<string>("Last4")
                        .HasColumnType("text")
                        .HasColumnName("last4");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("PaymentSystemStamp")
                        .HasColumnType("text")
                        .HasColumnName("payment_system_stamp");

                    b.Property<string>("PaymentSystemToken")
                        .HasColumnType("text")
                        .HasColumnName("payment_system_token");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_payment_methods");

                    b.ToTable("payment_methods", (string)null);
                });

            modelBuilder.Entity("EVerywhere.Balance.Domain.Entities.PaymentSystemConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("payment_system_configuration_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<bool>("IsCurrentSchema")
                        .HasColumnType("boolean")
                        .HasColumnName("is_current_schema");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("PaymentSystemName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_system_name");

                    b.HasKey("Id")
                        .HasName("pk_payment_system_configurations");

                    b.ToTable("payment_system_configurations", (string)null);
                });

            modelBuilder.Entity("EVerywhere.Balance.Domain.Entities.PaymentSystemWidget", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("payment_system_widget_generation_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalData")
                        .HasColumnType("jsonb")
                        .HasColumnName("additional_data");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<bool>("GotResponseFromPaymentSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("got_response_from_payment_system");

                    b.Property<long?>("HoldId")
                        .HasColumnType("bigint")
                        .HasColumnName("hold_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_disabled");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("boolean")
                        .HasColumnName("is_success");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("OperatorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("operator_id");

                    b.Property<string>("PaidResourceId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("paid_resource_id");

                    b.Property<long>("PaidResourceTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("paid_resource_type_id");

                    b.Property<long?>("PaymentId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_id");

                    b.Property<long>("PaymentSystemConfigurationId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_system_configuration_id");

                    b.Property<string>("PaymentSystemMessage")
                        .HasColumnType("text")
                        .HasColumnName("payment_system_message");

                    b.Property<string>("Token")
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<int>("WidgetReason")
                        .HasColumnType("integer")
                        .HasColumnName("widget_reason");

                    b.HasKey("Id")
                        .HasName("pk_payment_system_widget_generations");

                    b.HasIndex("HoldId")
                        .IsUnique()
                        .HasDatabaseName("ix_payment_system_widget_generations_hold_id");

                    b.HasIndex("PaidResourceTypeId")
                        .HasDatabaseName("ix_payment_system_widget_generations_paid_resource_type_id");

                    b.HasIndex("PaymentId")
                        .IsUnique()
                        .HasDatabaseName("ix_payment_system_widget_generations_payment_id");

                    b.HasIndex("PaymentSystemConfigurationId")
                        .HasDatabaseName("ix_payment_system_widget_generations_payment_system_configurat");

                    b.ToTable("payment_system_widget_generations", (string)null);
                });

            modelBuilder.Entity("EVerywhere.Balance.Domain.Entities.Receipt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("receipt_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<long?>("HoldId")
                        .HasColumnType("bigint")
                        .HasColumnName("hold_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsReceiptForHold")
                        .HasColumnType("boolean")
                        .HasColumnName("is_receipt_for_hold");

                    b.Property<bool>("IsReceiptForPayment")
                        .HasColumnType("boolean")
                        .HasColumnName("is_receipt_for_payment");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("PaidResourceId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("paid_resource_id");

                    b.Property<long?>("PaidResourceTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("paid_resource_type_id");

                    b.Property<long?>("PaymentId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_id");

                    b.Property<long?>("PaymentMethodId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_method_id");

                    b.Property<long?>("PaymentSystemConfigurationId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_system_configuration_id");

                    b.Property<string>("PaymentSystemTransactionId")
                        .HasColumnType("text")
                        .HasColumnName("payment_system_transaction_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_receipts");

                    b.HasIndex("HoldId")
                        .HasDatabaseName("ix_receipts_hold_id");

                    b.HasIndex("PaidResourceTypeId")
                        .HasDatabaseName("ix_receipts_paid_resource_type_id");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("ix_receipts_payment_id");

                    b.HasIndex("PaymentMethodId")
                        .HasDatabaseName("ix_receipts_payment_method_id");

                    b.HasIndex("PaymentSystemConfigurationId")
                        .HasDatabaseName("ix_receipts_payment_system_configuration_id");

                    b.ToTable("receipts", (string)null);
                });

            modelBuilder.Entity("EVerywhere.Balance.Domain.Entities.Debtor", b =>
                {
                    b.HasOne("EVerywhere.Balance.Domain.Entities.Payment", "NewPayment")
                        .WithOne("CaptureDebtor")
                        .HasForeignKey("EVerywhere.Balance.Domain.Entities.Debtor", "NewPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_debtors_payments_new_payment_id");

                    b.HasOne("EVerywhere.Balance.Domain.Entities.PaidResourceType", "PaidResourceType")
                        .WithMany("Debtors")
                        .HasForeignKey("PaidResourceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_debtors_paid_resource_type_paid_resource_type_id");

                    b.HasOne("EVerywhere.Balance.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Debtors")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_debtors_payment_methods_payment_method_id");

                    b.HasOne("EVerywhere.Balance.Domain.Entities.PaymentSystemConfiguration", "PaymentSystemConfiguration")
                        .WithMany("Debtors")
                        .HasForeignKey("PaymentSystemConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_debtors_payment_system_configurations_payment_system_config");

                    b.Navigation("NewPayment");

                    b.Navigation("PaidResourceType");

                    b.Navigation("PaymentMethod");

                    b.Navigation("PaymentSystemConfiguration");
                });

            modelBuilder.Entity("EVerywhere.Balance.Domain.Entities.Hold", b =>
                {
                    b.HasOne("EVerywhere.Balance.Domain.Entities.PaidResourceType", "PaidResourceType")
                        .WithMany("Holds")
                        .HasForeignKey("PaidResourceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_holds_paid_resource_type_paid_resource_type_id");

                    b.HasOne("EVerywhere.Balance.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Holds")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_holds_payment_methods_payment_method_id");

                    b.HasOne("EVerywhere.Balance.Domain.Entities.PaymentSystemConfiguration", "PaymentSystemConfiguration")
                        .WithMany("Holds")
                        .HasForeignKey("PaymentSystemConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_holds_payment_system_configurations_payment_system_configur");

                    b.Navigation("PaidResourceType");

                    b.Navigation("PaymentMethod");

                    b.Navigation("PaymentSystemConfiguration");
                });

            modelBuilder.Entity("EVerywhere.Balance.Domain.Entities.Payment", b =>
                {
                    b.HasOne("EVerywhere.Balance.Domain.Entities.Hold", "CapturedHold")
                        .WithOne("HoldCaptureCreatedPayment")
                        .HasForeignKey("EVerywhere.Balance.Domain.Entities.Payment", "CapturedHoldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_payments_holds_captured_hold_id");

                    b.HasOne("EVerywhere.Balance.Domain.Entities.PaidResourceType", "PaidResourceType")
                        .WithMany("Payments")
                        .HasForeignKey("PaidResourceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_payments_paid_resource_type_paid_resource_type_id");

                    b.HasOne("EVerywhere.Balance.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_payments_payment_methods_payment_method_id");

                    b.HasOne("EVerywhere.Balance.Domain.Entities.PaymentSystemConfiguration", "PaymentSystemConfiguration")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentSystemConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payments_payment_system_configurations_payment_system_confi");

                    b.Navigation("CapturedHold");

                    b.Navigation("PaidResourceType");

                    b.Navigation("PaymentMethod");

                    b.Navigation("PaymentSystemConfiguration");
                });

            modelBuilder.Entity("EVerywhere.Balance.Domain.Entities.PaymentSystemWidget", b =>
                {
                    b.HasOne("EVerywhere.Balance.Domain.Entities.Hold", "Hold")
                        .WithOne("PaymentSystemWidget")
                        .HasForeignKey("EVerywhere.Balance.Domain.Entities.PaymentSystemWidget", "HoldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_payment_system_widget_generations_holds_hold_id");

                    b.HasOne("EVerywhere.Balance.Domain.Entities.PaidResourceType", "PaidResourceType")
                        .WithMany("PaymentSystemWidgets")
                        .HasForeignKey("PaidResourceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payment_system_widget_generations_paid_resource_type_config");

                    b.HasOne("EVerywhere.Balance.Domain.Entities.Payment", "Payment")
                        .WithOne("PaymentSystemWidgets")
                        .HasForeignKey("EVerywhere.Balance.Domain.Entities.PaymentSystemWidget", "PaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_payment_system_widget_generations_payments_payment_id");

                    b.HasOne("EVerywhere.Balance.Domain.Entities.PaymentSystemConfiguration", "PaymentSystemConfiguration")
                        .WithMany("PaymentSystemWidgets")
                        .HasForeignKey("PaymentSystemConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payment_system_widget_generations_payment_system_configurat");

                    b.Navigation("Hold");

                    b.Navigation("PaidResourceType");

                    b.Navigation("Payment");

                    b.Navigation("PaymentSystemConfiguration");
                });

            modelBuilder.Entity("EVerywhere.Balance.Domain.Entities.Receipt", b =>
                {
                    b.HasOne("EVerywhere.Balance.Domain.Entities.Hold", "Hold")
                        .WithMany("Receipts")
                        .HasForeignKey("HoldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_receipts_holds_hold_id");

                    b.HasOne("EVerywhere.Balance.Domain.Entities.PaidResourceType", "PaidResourceType")
                        .WithMany("Receipts")
                        .HasForeignKey("PaidResourceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_receipts_paid_resource_type_paid_resource_type_id");

                    b.HasOne("EVerywhere.Balance.Domain.Entities.Payment", "Payment")
                        .WithMany("Receipts")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_receipts_payments_payment_id");

                    b.HasOne("EVerywhere.Balance.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Receipts")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_receipts_payment_methods_payment_method_id");

                    b.HasOne("EVerywhere.Balance.Domain.Entities.PaymentSystemConfiguration", "PaymentSystemConfiguration")
                        .WithMany("Receipts")
                        .HasForeignKey("PaymentSystemConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_receipts_payment_system_configurations_payment_system_confi");

                    b.Navigation("Hold");

                    b.Navigation("PaidResourceType");

                    b.Navigation("Payment");

                    b.Navigation("PaymentMethod");

                    b.Navigation("PaymentSystemConfiguration");
                });

            modelBuilder.Entity("EVerywhere.Balance.Domain.Entities.Hold", b =>
                {
                    b.Navigation("HoldCaptureCreatedPayment");

                    b.Navigation("PaymentSystemWidget");

                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("EVerywhere.Balance.Domain.Entities.PaidResourceType", b =>
                {
                    b.Navigation("Debtors");

                    b.Navigation("Holds");

                    b.Navigation("PaymentSystemWidgets");

                    b.Navigation("Payments");

                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("EVerywhere.Balance.Domain.Entities.Payment", b =>
                {
                    b.Navigation("CaptureDebtor");

                    b.Navigation("PaymentSystemWidgets");

                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("EVerywhere.Balance.Domain.Entities.PaymentMethod", b =>
                {
                    b.Navigation("Debtors");

                    b.Navigation("Holds");

                    b.Navigation("Payments");

                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("EVerywhere.Balance.Domain.Entities.PaymentSystemConfiguration", b =>
                {
                    b.Navigation("Debtors");

                    b.Navigation("Holds");

                    b.Navigation("PaymentSystemWidgets");

                    b.Navigation("Payments");

                    b.Navigation("Receipts");
                });
#pragma warning restore 612, 618
        }
    }
}
